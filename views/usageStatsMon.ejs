<style>

input {
  border: 1px solid transparent;
  border-color: black;
  background-color: white;
  padding: 10px;
  font-size: 16px;
}

input[type=text] {
  background-color: white;
  width: 100%;
}

input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}

/*the container must be positioned relative:*/
.autocomplete {
  position: relative;
  display: inline-block;
}

.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}

.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
</style>

<h2>View Usage Stats for Pokemon in Format</h2>
<div style="background-color: rgb(233, 255, 235); border: solid; border-color: rgb(195, 219, 197); padding: 25px; width: auto">
    <p style="font-size: 16px">This is the page to view the usage statistics of the selected Pokemon in a specific competitive format. Data is 
        collected by Smogon. The data are from different dates. The most current data with reasonable sample sizes are used to display the stats.</p> 
    <p style="font-size: 16px">Enter a Pokemon and select a given format (tier and generation) and a skill level to view a table of all Pokemon 
        used in the format at that skill level.</p>
    <br>

    <form method="post" action="/usageStatsMon" autocomplete="off">
        <div class="autocomplete" style="width:300px;">
            <p style="font-size: 16px">Enter Pokemon: <input type="text" name="pokemon" id="monInput"></p>
        </div>
        <br>
        <p style="font-size: 16px">
        Select format:
        <select name="format">
            <optgroup label="Gen 9">
                <option value="9Ubers">Gen 9 Ubers</option>
                <option value="9OU">Gen 9 OU</option>
                <option value="9UU">Gen 9 UU</option>
                <option value="9RU">Gen 9 RU</option>
                <option value="9NU">Gen 9 NU</option>
                <option value="9PU">Gen 9 PU</option>
                <option value="9LC">Gen 9 LC</option>
            </optgroup>
            <optgroup label="Gen 8">
                <option value="8Ubers">Gen 8 Ubers</option>
                <option value="8OU">Gen 8 OU</option>
                <option value="8UU">Gen 8 UU</option>
                <option value="8RU">Gen 8 RU</option>
                <option value="8NU">Gen 8 NU</option>
                <option value="8PU">Gen 8 PU</option>
                <option value="8LC">Gen 8 LC</option>
            </optgroup>
            <optgroup label="Gen 7">
                <option value="7Ubers">Gen 7 Ubers</option>
                <option value="7OU">Gen 7 OU</option>
                <option value="7UU">Gen 7 UU</option>
                <option value="7RU">Gen 7 RU</option>
                <option value="7NU">Gen 7 NU</option>
                <option value="7PU">Gen 7 PU</option>
                <option value="7LC">Gen 7 LC</option>
            </optgroup>
            <optgroup label="Gen 6">
                <option value="6Ubers">Gen 6 Ubers</option>
                <option value="6OU">Gen 6 OU</option>
                <option value="6UU">Gen 6 UU</option>
                <option value="6RU">Gen 6 RU</option>
                <option value="6NU">Gen 6 NU</option>
                <option value="6PU">Gen 6 PU</option>
                <option value="6LC">Gen 6 LC</option>
            </optgroup>
            <optgroup label="Gen 5">
                <option value="5Ubers">Gen 5 Ubers</option>
                <option value="5OU">Gen 5 OU</option>
                <option value="5UU">Gen 5 UU</option>
                <option value="5RU">Gen 5 RU</option>
                <option value="5NU">Gen 5 NU</option>
                <option value="5PU">Gen 5 PU</option>
                <option value="5LC">Gen 5 LC</option>
            </optgroup>
            <optgroup label="Gen 4">
                <option value="4Ubers">Gen 4 Ubers</option>
                <option value="4OU">Gen 4 OU</option>
                <option value="4UU">Gen 4 UU</option>
                <option value="4NU">Gen 4 NU</option>
                <option value="4PU">Gen 4 PU</option>
                <option value="4LC">Gen 4 LC</option>
            </optgroup>
            <optgroup label="Gen 3">
                <option value="3Ubers">Gen 3 Ubers</option>
                <option value="3OU">Gen 3 OU</option>
                <option value="3UU">Gen 3 UU</option>
                <option value="3NU">Gen 3 NU</option>
            </optgroup>
            <optgroup label="Gen 2">
                <option value="2Ubers">Gen 2 Ubers</option>
                <option value="2OU">Gen 2 OU</option>
                <option value="2UU">Gen 2 UU</option>
                <option value="2NU">Gen 2 NU</option>
            </optgroup>
            <optgroup label="Gen 1">
                <option value="1Ubers">Gen 1 Ubers</option>
                <option value="1OU">Gen 1 OU</option>
                <option value="1UU">Gen 1 UU</option>
                <option value="1NU">Gen 1 NU</option>
            </optgroup>
        </select>

        Select skill level:
        <select name="rating">
            <option value="Expert" style="background-color:red; color:white">Expert</option>
            <option value="Skilled" style="background-color:darkorange; color:white">Skilled</option>
            <option value="Average" style="background-color:gold">Average</option>
            <option value="Beginner" style="background-color:forestgreen">Beginner</option>
        </select>
        </p>
        <hr>
        <input type="submit">
    </form>
</div>
<br>
<p><span style="color:rgb(93, 0, 255)"><b>Note:</b></span> Performance might be a little slow. Generating the specific usage statistics of the 
    Pokemon chosen requires searching through more data than the other sections of the website.</p>

<script>

    function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false;}
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            /*create a DIV element for each matching element:*/
            b = document.createElement("DIV");
            /*make the matching letters bold:*/
            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
            b.innerHTML += arr[i].substr(val.length);
            /*insert a input field that will hold the current array item's value:*/
            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
            /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                /*insert the value for the autocomplete text field:*/
                inp.value = this.getElementsByTagName("input")[0].value;
                /*close the list of autocompleted values,
                (or any other open lists of autocompleted values:*/
                closeAllLists();
            });
            a.appendChild(b);
            }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
        } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
            /*and simulate a click on the "active" item:*/
            if (x) x[currentFocus].click();
            }
        }
    });
    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
        }
    }
    function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
        }
    }
    }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click", function (e) {
        closeAllLists(e.target);
    });
    }

const allMonNames = <%- JSON.stringify(allMonNames) %>;

autocomplete(document.getElementById("monInput"), allMonNames)
</script>